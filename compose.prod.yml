services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: ./api/.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "\
        pg_isready -U postgres && \
        psql -U postgres -d trackeame -c '\\q' && \
        psql -U postgres -d umami     -c '\\q' \
      "] 
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: api
    restart: unless-stopped
    env_file: ./api/.env
    depends_on:
      postgres:
        condition: service_healthy 
      redis:
        condition: service_healthy 

  worker:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: worker
    restart: unless-stopped
    env_file: ./api/.env
    depends_on:
      postgres:
        condition: service_healthy 
      redis:
        condition: service_healthy 

  umami:
    image: docker.umami.is/umami-software/umami:postgresql-latest
    ports:
      - "3000:3000"
    restart: unless-stopped
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./frontend/.env.local
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro

volumes:
  pgdata:
  redis-data:
